<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="drink">
  
		<select id="selectBigCategoryList" resultType="camelmap">
  			SELECT CODE, VALUE
			FROM DRINK_CATEGORY WHERE kind = 1 AND USE_YN = 'Y'
			ORDER BY CT_IDX
  		</select>
  		
		<select id="selectSmallCategoryList" parameterType="String" resultType="camelmap">
			SELECT CODE, VALUE
			FROM DRINK_CATEGORY WHERE kind = 2 AND USE_YN = 'Y' AND SUPER_CODE = #{value}
			ORDER BY CT_IDX
  		</select>
  		<!-- 
		<select id="selectItemValuesInfo" parameterType="String" resultType="camelmap">
			SELECT ITEM1_VAL, ITEM2_VAL, ITEM3_VAL, ITEM4_VAL, ITEM5_VAL
			FROM ELEMENT_INFO WHERE DK_BKIND = #{value}
  		</select>
  		 -->
  		 
  		<select id="selectItemValuesList" parameterType="String" resultType="String">
	  		SELECT (CASE ROWNUM WHEN 1 THEN ITEM1_VAL WHEN 2 THEN ITEM2_VAL WHEN 3 THEN ITEM3_VAL WHEN 4 THEN ITEM4_VAL ELSE ITEM5_VAL END) item_values
			FROM (SELECT ITEM1_VAL, ITEM2_VAL, ITEM3_VAL, ITEM4_VAL, ITEM5_VAL FROM ELEMENT_INFO WHERE DK_BKIND = #{value})
			CONNECT BY LEVEL <![CDATA[ <= ]]> 5
		</select>
		  		
  		
  		<!--   -->
		<select id="selectDrinkServiceInfo" parameterType="String" resultType="project.spring.drink.vo.DrinkVO">
  			SELECT INFO.DK_CODE,INFO.DK_NAME, INFO.DK_BKIND, BCATE.VALUE AS DK_BKIND_VALUE, 
					INFO.DK_SKIND, SCATE.VALUE AS DK_SKIND_VALUE,
					INFO.DK_IMG, INFO.DK_ALCOHOL, INFO.DK_COUNTRY, INFO.DK_CITY,
					INFO.DK_PLACE, INFO.DK_FOOD, INFO.DK_LIKE, INFO.DK_APPROVE, 
					INFO.DK_CONTENT1, INFO.DK_CONTENT2, INFO.DK_CONTENT3,
					INFO.INSERT_ID, INFO.INSERT_DAY,
					EINFO.ITEM1_VAL, EINFO.ITEM2_VAL, EINFO.ITEM3_VAL, EINFO.ITEM4_VAL, EINFO.ITEM5_VAL,
					INFO.DK_ITEM1, INFO.DK_ITEM2, INFO.DK_ITEM3, INFO.DK_ITEM4, INFO.DK_ITEM5
			FROM DRINK_INFO INFO INNER JOIN 
				DRINK_CATEGORY BCATE ON INFO.DK_BKIND = BCATE.CODE INNER JOIN
				DRINK_CATEGORY SCATE ON INFO.DK_SKIND = SCATE.CODE INNER JOIN
				ELEMENT_INFO EINFO ON INFO.DK_BKIND = EINFO.DK_BKIND 
			WHERE DK_CODE = #{value}
  		</select>
  		
		<select id="selectCommentStarServiceInfo" parameterType="String" resultType="camelmap">
  			SELECT DK_CODE, COUNT(CM_IDX) CM_COUNT, 
  					AVG(ITEM1) CM_ITEM1, AVG(ITEM2) CM_ITEM2, AVG(ITEM3) CM_ITEM3, AVG(ITEM4) CM_ITEM4, AVG(ITEM5) CM_ITEM5  
  			FROM DRINK_COMMENT 
  			WHERE DK_CODE = #{value} AND IS_DELETE = 'N'
  			GROUP BY DK_CODE 
  		</select>
  		
		<select id="selectTagCloudServiceInfo" parameterType="String" resultType="camelmap">
  			SELECT DK_CODE, TAG_VALUE, TAG_COUNT FROM DRINK_TAG WHERE dk_code = #{value} ORDER BY TAG_COUNT	
  		</select>
  		
  		<select id="selectCommentServiceList" parameterType="String" resultType="project.spring.drink.vo.CommentVO">
  			SELECT CM_IDX, DK_CODE, CM_LIKE, CM_UNLIKE, CM_COMMENT, INSERT_ID, NICKNAME, C.INSERT_DAY, 
					(SELECT COUNT(T.ID) FROM MY_TITLE T WHERE T.ID = M.ID) AS WRITER_TITLE_CNT, MY.TITLE_INDEX, TL.TITLE_NAME AS WRITER_TITLE_NAME,
					C.ITEM1, C.ITEM2, C.ITEM3, C.ITEM4, C.ITEM5
			FROM DRINK_COMMENT C INNER JOIN 
				 MEMBER_INFO M ON C.INSERT_ID = M.ID LEFT OUTER JOIN 
				 (SELECT TITLE_INDEX, ID, CHOOSE_TITLE FROM MY_TITLE) MY ON M.ID = MY.ID AND MY.CHOOSE_TITLE = 'Y' LEFT OUTER JOIN
				 TITLE_LIST TL ON MY.TITLE_INDEX = TL.TITLE_IDX
			WHERE dk_code = 'DK00001' AND IS_DELETE = 'N' ORDER BY CM_IDX DESC	
  		</select>
  		
  		<!-- <select id="userCount" resultType="int">
  			select count(*) from test
  		</select>
  		<select id="maxAge" resultType="int">
			select max(age) from test  		
  		</select>
  		<select id="selectAll" resultType="TestMybatisDTO">
  			select * from test
  		</select>
  		<select id="getOneUser" resultType="TestMybatisDTO" parameterType="String" >
  			select * from test where id = #{v}
  		</select>
  		<select id="getReg" parameterType="string" resultType="java.sql.Timestamp">
  			select reg from test where id = #{v}
  		</select>
  		<select id="insertUser" parameterType="TestMybatisDTO">
  			insert into test(id,pw,age,reg) values(#{id},#{pw},#{age},sysdate)
  		</select>
  		<update id="updateUser" parameterType="hashMap">
  			update test set age=#{age},pw=#{pw} where id=#{id}
  		</update>
  		<delete id="deleteUser" parameterType="string">
  			delete from test where id = #{id}
  		</delete> -->
  </mapper>
