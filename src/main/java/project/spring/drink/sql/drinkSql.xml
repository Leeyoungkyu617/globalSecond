<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="drink">
  
  		<select id="selectDrinkServiceList" parameterType="hashMap" resultType="project.spring.drink.vo.DrinkVO">
  		
  			SELECT aa.* FROM (SELECT a.* ,rownum r FROM (
			SELECT DK_CODE, DK_NAME, DK_BKIND, DK_SKIND, DK_IMG, DK_ALCOHOL, DK_COUNTRY, DK_CITY, DK_PLACE, DK_LIKE, DK_APPROVE, INSERT_ID
			FROM DRINK_INFO 
			WHERE 
				<choose>
				    <when test='memKind == "admin"'>
				    	<![CDATA[ DK_APPROVE <= 1 ]]>
				    </when>
				    <otherwise>
				    	(<![CDATA[ DK_APPROVE = 1 ]]> <if test="memId != null and !memId.equals('')"> OR (DK_APPROVE = 0 AND INSERT_ID = #{memId}) </if>) 
				    </otherwise>
				</choose>
				<if test="schDkVal != null and !schDkVal.equals('')">
					AND (DK_NAME LIKE '%' || #{schDkVal} || '%' OR DK_COUNTRY LIKE '%' || #{schDkVal} || '%' OR DK_CITY LIKE '%' || #{schDkVal} || '%' OR DK_PLACE LIKE '%' || #{schDkVal} || '%') 
				</if>
				<if test="schDkBkind != null and !schDkBkind.equals('')">
					AND DK_BKIND = #{schDkBkind} 
				</if>
				<if test="schDkSkind != null and !schDkSkind.equals('')">
					AND DK_SKIND = #{schDkSkind} 
				</if>
				<if test="schDkAlcoholMin != null">
					AND DK_ALCOHOL BETWEEN #{schDkAlcoholMin} AND #{schDkAlcoholMax}
				</if>
				
				<choose>
				    <when test='schDkCountry == "K"'>
				      AND DK_COUNTRY = '한국'
				    </when>
				    <when test='schDkCountry == "O"'>
				      AND DK_COUNTRY != '한국'
				    </when>
				</choose>
			ORDER BY INSERT_DAY DESC
			<![CDATA[	
			) a )aa  WHERE  r >= (30*#{pageNum})+1 and r <= (30*(#{pageNum}+1))
			]]>
  		</select>
    
		<select id="selectBigCategoryList" resultType="camelmap">
  			SELECT CODE, VALUE
			FROM DRINK_CATEGORY WHERE kind = 1 AND USE_YN = 'Y'
			ORDER BY CT_IDX
  		</select>
  		
		<select id="selectSmallCategoryList" parameterType="String" resultType="camelmap">
			SELECT CODE, VALUE
			FROM DRINK_CATEGORY WHERE kind = 2 AND USE_YN = 'Y' AND SUPER_CODE = #{value}
			ORDER BY CT_IDX
  		</select>
  		<!-- 
		<select id="selectItemValuesInfo" parameterType="String" resultType="camelmap">
			SELECT ITEM1_VAL, ITEM2_VAL, ITEM3_VAL, ITEM4_VAL, ITEM5_VAL
			FROM ELEMENT_INFO WHERE DK_BKIND = #{value}
  		</select>
  		 -->
  		 
  		<select id="selectItemValuesList" parameterType="String" resultType="String">
	  		SELECT (CASE ROWNUM WHEN 1 THEN ITEM1_VAL WHEN 2 THEN ITEM2_VAL WHEN 3 THEN ITEM3_VAL WHEN 4 THEN ITEM4_VAL ELSE ITEM5_VAL END) item_values
			FROM (SELECT ITEM1_VAL, ITEM2_VAL, ITEM3_VAL, ITEM4_VAL, ITEM5_VAL FROM ELEMENT_INFO WHERE DK_BKIND = #{value})
			CONNECT BY LEVEL <![CDATA[ <= ]]> 5
		</select>
		  		
  		
  		<!--   -->
		<select id="selectDrinkServiceInfo" parameterType="String" resultType="project.spring.drink.vo.DrinkVO">
  			SELECT INFO.DK_CODE,INFO.DK_NAME, INFO.DK_BKIND, BCATE.VALUE AS DK_BKIND_VALUE, 
					INFO.DK_SKIND, SCATE.VALUE AS DK_SKIND_VALUE,
					INFO.DK_IMG, INFO.DK_ALCOHOL, INFO.DK_COUNTRY, INFO.DK_CITY,
					INFO.DK_PLACE, INFO.DK_FOOD, INFO.DK_LIKE, INFO.DK_APPROVE, 
					INFO.DK_CONTENT1, INFO.DK_CONTENT2, INFO.DK_CONTENT3,
					INFO.INSERT_ID, INFO.INSERT_DAY,
					EINFO.ITEM1_VAL, EINFO.ITEM2_VAL, EINFO.ITEM3_VAL, EINFO.ITEM4_VAL, EINFO.ITEM5_VAL,
					INFO.DK_ITEM1, INFO.DK_ITEM2, INFO.DK_ITEM3, INFO.DK_ITEM4, INFO.DK_ITEM5
			FROM DRINK_INFO INFO INNER JOIN 
				DRINK_CATEGORY BCATE ON INFO.DK_BKIND = BCATE.CODE INNER JOIN
				DRINK_CATEGORY SCATE ON INFO.DK_SKIND = SCATE.CODE INNER JOIN
				ELEMENT_INFO EINFO ON INFO.DK_BKIND = EINFO.DK_BKIND 
			WHERE DK_CODE = #{value}
  		</select>
  		
		<select id="selectTagCloudServiceInfo" parameterType="String" resultType="camelmap">
  			SELECT DK_CODE, TAG_VALUE, TAG_COUNT FROM DRINK_TAG WHERE dk_code = #{value} ORDER BY TAG_COUNT	
  		</select>
  		
		<select id="selectCommentStarServiceInfo" parameterType="String" resultType="camelmap">
  			SELECT DK_CODE, COUNT(CM_IDX) CM_COUNT, 
  					AVG(ITEM1) CM_ITEM1, AVG(ITEM2) CM_ITEM2, AVG(ITEM3) CM_ITEM3, AVG(ITEM4) CM_ITEM4, AVG(ITEM5) CM_ITEM5  
  			FROM DRINK_COMMENT 
  			WHERE DK_CODE = #{value} AND IS_DELETE = 'N'
  			GROUP BY DK_CODE 
  		</select>
  		
  		<select id="selectCommentServiceList" parameterType="String" resultType="project.spring.drink.vo.CommentVO">
  			SELECT CM_IDX, DK_CODE, CM_LIKE, CM_UNLIKE, CM_COMMENT, INSERT_ID, NICKNAME, C.INSERT_DAY, 
					(SELECT COUNT(T.ID) FROM MY_TITLE T WHERE T.ID = M.ID) AS WRITER_TITLE_CNT, 
					MY.TITLE_INDEX, TL.TITLE_NAME AS WRITER_TITLE_NAME,
					C.ITEM1, C.ITEM2, C.ITEM3, C.ITEM4, C.ITEM5
			FROM DRINK_COMMENT C INNER JOIN 
				 MEMBER_INFO M ON C.INSERT_ID = M.ID LEFT OUTER JOIN 
				 (SELECT TITLE_INDEX, ID, CHOOSE_TITLE FROM MY_TITLE) MY ON M.ID = MY.ID AND MY.CHOOSE_TITLE = 'Y' LEFT OUTER JOIN
				 TITLE_LIST TL ON MY.TITLE_INDEX = TL.TITLE_IDX
			WHERE dk_code = #{value} AND IS_DELETE = 'N' ORDER BY CM_IDX DESC	
  		</select>
  		
  		<insert id="insertDrink" parameterType="project.spring.drink.vo.DrinkVO" statementType="CALLABLE">
  			{ CALL INSERT_DRINK_INFO(#{dkName}, #{dkBkind}, #{dkSkind}, #{dkImg}, #{dkAlcohol}, #{dkCountry}, #{dkCity}, #{dkPlace}, #{dkFood}, #{dkContent1}, #{dkContent2}, #{dkContent3}, #{dkItem1}, #{dkItem2}, #{dkItem3}, #{dkItem4}, #{dkItem5}, #{dkApprove}, #{insertId}, #{dkCode, mode=OUT, jdbcType=VARCHAR, javaType=String}) }
  		</insert>
  		
  		<update id="updateDrinkTag" parameterType="hashMap" statementType="CALLABLE">
  			{ CALL UPDATE_DRINK_TAG(#{dkCode}, #{dkTags}) }
  		</update>
  		
  		<update id="modifyDrink" parameterType="project.spring.drink.vo.DrinkVO">
  			UPDATE DRINK_INFO SET   				
				DK_NAME 		= #{dkName},
				DK_BKIND 		= #{dkBkind},
				DK_SKIND 		= #{dkSkind},
				DK_IMG 			= #{dkImg},
				DK_ALCOHOL 		= #{dkAlcohol},
				DK_COUNTRY 		= #{dkCountry},
				DK_CITY 		= #{dkCity},
				DK_PLACE 		= #{dkPlace},
				DK_FOOD 		= #{dkFood},
				DK_CONTENT1 	= #{dkContent1},
				DK_CONTENT2 	= #{dkContent2},
				DK_CONTENT3 	= #{dkContent3},
				DK_ITEM1 		= #{dkItem1},
				DK_ITEM2 		= #{dkItem2},
				DK_ITEM3 		= #{dkItem3},
				DK_ITEM4 		= #{dkItem4},
				DK_ITEM5 		= #{dkItem5}
  			WHERE DK_CODE = #{dkCode}
  		</update>
  		
  		<select id="selectDrinkLikeInfo" parameterType="hashmap" resultType="String">
			SELECT CASE COUNT(ML_IDX) WHEN 0 THEN 'N' ELSE 'Y' END AS likeYn 
			FROM MY_LIKE 
			WHERE ML_KIND = 'DK' AND ML_VALUE = #{dkCode} AND INSERT_ID = #{memId}
  		</select>
  		
  		<!-- likeYn 현재 좋아요 상태 : Y - 좋아요, N - 미등록  -->
  		
  		<insert id="insertDrinkLikeInfo" parameterType="hashmap">
			INSERT INTO MY_LIKE VALUES(MY_LIKE_SEQ.NEXTVAL, 'DK', #{dkCode}, #{memId})
   		</insert>
   		
  		<delete id="deleteDrinkLikeInfo" parameterType="hashmap">
  			DELETE FROM MY_LIKE WHERE ML_KIND = 'DK' AND ML_VALUE = #{dkCode} AND INSERT_ID = #{memId}
   		</delete>
   		
  		<update id="updateDrinkLikeCount" parameterType="hashmap">
  			UPDATE DRINK_INFO
	  			<set>			
					<if test='likeYn == "Y"'>
						DK_LIKE = DK_LIKE - 1
					</if>
					<if test='likeYn != "Y"'>
						DK_LIKE = DK_LIKE + 1
					</if>
				</set>
  			WHERE DK_CODE = #{dkCode}
   		</update>
   		
   		<insert id="insertComment" parameterType="project.spring.drink.vo.CommentVO">
			INSERT INTO DRINK_COMMENT VALUES
			(
				drink_comment_seq.nextval,
				#{dkCode},
				#{cmLike},
				#{cmUnLike},
				#{cmComment},
				#{item1}, #{item2}, #{item3}, #{item4}, #{item5},
				#{insertId},
				sysdate,
				'N'
			)
   		</insert>
   		  		
  		<!-- <select id="userCount" resultType="int">
  			select count(*) from test
  		</select>
  		<select id="maxAge" resultType="int">
			select max(age) from test  		
  		</select>
  		<select id="selectAll" resultType="TestMybatisDTO">
  			select * from test
  		</select>
  		<select id="getOneUser" resultType="TestMybatisDTO" parameterType="String" >
  			select * from test where id = #{v}
  		</select>
  		<select id="getReg" parameterType="string" resultType="java.sql.Timestamp">
  			select reg from test where id = #{v}
  		</select>
  		<select id="insertUser" parameterType="TestMybatisDTO">
  			insert into test(id,pw,age,reg) values(#{id},#{pw},#{age},sysdate)
  		</select>
  		<update id="updateUser" parameterType="hashMap">
  			update test set age=#{age},pw=#{pw} where id=#{id}
  		</update>
  		<delete id="deleteUser" parameterType="string">
  			delete from test where id = #{id}
  		</delete> -->
  </mapper>
